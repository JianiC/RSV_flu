gather(., "comp", "count", -time)
test %.>%
select(., -`.id`) %.>%
gather(., "comp", "count", -time) %.>%
ggplot(., aes(x = time, y = count)) +
geom_line()+
facet_wrap(.~comp, scales = "free")
# make a pomp object
hhs1_a_rsv_po <- make_pomp_model(df = pomp_data_hhs1_arsv, time_start_sim = -10)
# test if the integratro works as default
test <- trajectory(object = hhs1_a_rsv_po, format = "d")
test %.>%
slice(., 2:n()) %.>%
select(., -`.id`) %.>%
gather(., "comp", "count", -time) %.>%
ggplot(., aes(x = time, y = count)) +
geom_line()+
facet_wrap(.~comp, scales = "free")
source('~/Documents/GitHub/RSV_flu/pomp_1201/test_script.R', echo=TRUE)
# first load prerequisites
source("./src.R", chdir = TRUE)
# make data ready for pomp
pomp_data_hhs1_arsv <- (
inc_data %.>%
make_data_pomp_ready(., virus_combo = c("flu_A", "RSV"), HHS_region = 1)
)
# make a pomp object
hhs1_a_rsv_po <- make_pomp_model(df = pomp_data_hhs1_arsv, time_start_sim = -100)
source('~/Documents/GitHub/RSV_flu/pomp_1201/test_script.R', echo=TRUE)
dev.off()
test %.>%
slice(., 2:n()) %.>%
select(., -`.id`) %.>%
gather(., "comp", "count", -time) %.>%
ggplot(., aes(x = time, y = count)) +
geom_line()+
facet_wrap(.~comp, scales = "free")
source('~/Documents/GitHub/RSV_flu/pomp_1201/test_script.R', echo=TRUE)
test %.>%
slice(., 2:n()) %.>%
select(., -`.id`) %.>%
gather(., "comp", "count", -time) %.>%
ggplot(., aes(x = time, y = count)) +
geom_line()+
facet_wrap(.~comp, scales = "free")
test
# test if the integratro works as default
test <- trajectory(object = hhs1_a_rsv_po, format = "d", method = "ode23")
test %.>%
slice(., 2:n()) %.>%
select(., -`.id`) %.>%
gather(., "comp", "count", -time) %.>%
ggplot(., aes(x = time, y = count)) +
geom_line()+
facet_wrap(.~comp, scales = "free")
dev.off()
test
test %.>%
slice(., 2:n()) %.>%
select(., -`.id`) %.>%
gather(., "comp", "count", -time) %.>%
ggplot(., aes(x = time, y = count)) +
geom_line()+
facet_wrap(.~comp, scales = "free")
pomp_data_hhs1_arsv
# this function prepares incidence data for pomp
make_data_pomp_ready <- function(data = inc_data, virus_combo = c("RSV", "fluA"), HHS_region = 1) {
browser()
data %.>%
filter(., HHS_REGION == HHS_region & virus %in% virus_combo) %.>%
mutate(.,
virus = ifelse(virus == virus_combo[1], "total1", "total2")) %.>%
select(., -c(HHS_REGION)) %.>%
spread(., key = virus, value = cases)
}
make_data_pomp_ready()
data %.>%
filter(., HHS_REGION == HHS_region & virus %in% virus_combo)
data %.>%
filter(., HHS_REGION == HHS_region & virus %in% virus_combo) %.>%
mutate(.,
virus = ifelse(virus == virus_combo[1], "total1", "total2"))
data %.>%
filter(., HHS_REGION == HHS_region & virus %in% virus_combo) %.>%
mutate(.,
virus = ifelse(virus == virus_combo[1], "total1", "total2")) %.>%
select(., -c(HHS_REGION))
data %.>%
filter(., HHS_REGION == HHS_region & virus %in% virus_combo) %.>%
mutate(.,
virus = ifelse(virus == virus_combo[1], "total1", "total2")) %.>%
select(., -c(HHS_REGION)) %.>%
spread(., key = virus, value = cases)
# make data ready for pomp
pomp_data_hhs1_arsv <- (
inc_data %.>%
make_data_pomp_ready(., virus_combo = c("fluA", "RSV"), HHS_region = 1)
)
# this function prepares incidence data for pomp
make_data_pomp_ready <- function(data = inc_data, virus_combo = c("RSV", "fluA"), HHS_region = 1) {
#browser()
data %.>%
filter(., HHS_REGION == HHS_region & virus %in% virus_combo) %.>%
mutate(.,
virus = ifelse(virus == virus_combo[1], "total1", "total2")) %.>%
select(., -c(HHS_REGION)) %.>%
spread(., key = virus, value = cases)
}
# make data ready for pomp
pomp_data_hhs1_arsv <- (
inc_data %.>%
make_data_pomp_ready(., virus_combo = c("fluA", "RSV"), HHS_region = 1)
)
pomp_data_hhs1_arsv
pseudo_data <- tibble(time = c(0, 30, by = 1/52),
total1 = NA,
total2 = NA)
# make a pomp object
hhs1_a_rsv_po <- make_pomp_model(df = seudo_data, time_start_sim = -100)
pseudo_data <- tibble(time = c(0, 30, by = 1/52),
total1 = NA,
total2 = NA)
# make a pomp object
hhs1_a_rsv_po <- make_pomp_model(df = pseudo_data, time_start_sim = -100)
pseudo_data <- tibble(time = c(0, 30, by = 1/52),
total1 = NA,
total2 = NA, N = pomp_data_hhs1_arsv$N[1])
# make a pomp object
hhs1_a_rsv_po <- make_pomp_model(df = pseudo_data, time_start_sim = -100)
pseudo_data
pseudo_data <- tibble(time = seq(0, 30, by = 1/52),
total1 = NA,
total2 = NA, N = pomp_data_hhs1_arsv$N[1])
pseudo_data
# make a pomp object
hhs1_a_rsv_po <- make_pomp_model(df = pseudo_data, time_start_sim = -100)
# test if the integratro works as default
test <- trajectory(object = hhs1_a_rsv_po, format = "d", method = "ode23")
test %.>%
slice(., 2:n()) %.>%
select(., -`.id`) %.>%
gather(., "comp", "count", -time) %.>%
ggplot(., aes(x = time, y = count)) +
geom_line()+
facet_wrap(.~comp, scales = "free")
source('~/Documents/GitHub/RSV_flu/pomp_1201/test_script.R', echo=TRUE)
test %.>%
slice(., 2:n()) %.>%
select(., -`.id`) %.>%
gather(., "comp", "count", -time) %.>%
ggplot(., aes(x = time, y = count)) +
geom_line()+
facet_wrap(.~comp, scales = "free")
dev.off()
test %.>%
slice(., 2:n()) %.>%
select(., -`.id`) %.>%
gather(., "comp", "count", -time) %.>%
ggplot(., aes(x = time, y = count)) +
geom_line()+
facet_wrap(.~comp, scales = "free")
dev.off()
dev.off()
test %.>%
slice(., 2:n()) %.>%
select(., -`.id`) %.>%
gather(., "comp", "count", -time) %.>%
ggplot(., aes(x = time, y = count)) +
geom_line()+
facet_wrap(.~comp, scales = "free")
source('~/Documents/GitHub/RSV_flu/pomp_1201/test_script.R', echo=TRUE)
test %.>%
slice(., 2:n()) %.>%
select(., -`.id`) %.>%
gather(., "comp", "count", -time) %.>%
ggplot(., aes(x = time, y = count)) +
geom_line()+
facet_wrap(.~comp, scales = "free")
# first load prerequisites
source("./src.R", chdir = TRUE)
# make data ready for pomp
pomp_data_hhs1_arsv <- (
inc_data %.>%
make_data_pomp_ready(., virus_combo = c("fluA", "RSV"), HHS_region = 1)
)
pseudo_data <- tibble(time = seq(0, 10, by = 1/52),
total1 = NA,
total2 = NA, N = pomp_data_hhs1_arsv$N[1])
# make a pomp object
hhs1_a_rsv_po <- make_pomp_model(df = pseudo_data, time_start_sim = -100)
# first load prerequisites
source("./src.R", chdir = TRUE)
# make data ready for pomp
pomp_data_hhs1_arsv <- (
inc_data %.>%
make_data_pomp_ready(., virus_combo = c("fluA", "RSV"), HHS_region = 1)
)
pseudo_data <- tibble(time = seq(0, 10, by = 1/52),
total1 = NA,
total2 = NA, N = pomp_data_hhs1_arsv$N[1])
# make a pomp object
hhs1_a_rsv_po <- make_pomp_model(df = pseudo_data, time_start_sim = -100)
# this script runs different functions to make sure that they are running alright
# first load prerequisites
source("./src.R", chdir = TRUE)
# make data ready for pomp
pomp_data_hhs1_arsv <- (
inc_data %.>%
make_data_pomp_ready(., virus_combo = c("fluA", "RSV"), HHS_region = 1)
)
pseudo_data <- tibble(time = seq(0, 10, by = 1/52),
total1 = NA,
total2 = NA, N = pomp_data_hhs1_arsv$N[1])
# make a pomp object
hhs1_a_rsv_po <- make_pomp_model(df = pseudo_data, time_start_sim = -100)
# inspect the compiled pomp object
# this script runs different functions to make sure that they are running alright
# first load prerequisites
source("./src.R", chdir = TRUE)
# make data ready for pomp
pomp_data_hhs1_arsv <- (
inc_data %.>%
make_data_pomp_ready(., virus_combo = c("fluA", "RSV"), HHS_region = 1)
)
pseudo_data <- tibble(time = seq(0, 10, by = 1/52),
total1 = NA,
total2 = NA, N = pomp_data_hhs1_arsv$N[1])
# make a pomp object
hhs1_a_rsv_po <- make_pomp_model(df = pseudo_data, time_start_sim = -100)
# this script runs different functions to make sure that they are running alright
# first load prerequisites
source("./src.R", chdir = TRUE)
# make data ready for pomp
pomp_data_hhs1_arsv <- (
inc_data %.>%
make_data_pomp_ready(., virus_combo = c("fluA", "RSV"), HHS_region = 1)
)
pseudo_data <- tibble(time = seq(0, 10, by = 1/52),
total1 = NA,
total2 = NA, N = pomp_data_hhs1_arsv$N[1])
# make a pomp object
hhs1_a_rsv_po <- make_pomp_model(df = pseudo_data, time_start_sim = -100)
# this script runs different functions to make sure that they are running alright
# first load prerequisites
source("./src.R", chdir = TRUE)
# make data ready for pomp
pomp_data_hhs1_arsv <- (
inc_data %.>%
make_data_pomp_ready(., virus_combo = c("fluA", "RSV"), HHS_region = 1)
)
pseudo_data <- tibble(time = seq(0, 10, by = 1/52),
total1 = NA,
total2 = NA, N = pomp_data_hhs1_arsv$N[1])
# make a pomp object
hhs1_a_rsv_po <- make_pomp_model(df = pseudo_data, time_start_sim = -100)
# this script runs different functions to make sure that they are running alright
# first load prerequisites
source("./src.R", chdir = TRUE)
# make data ready for pomp
pomp_data_hhs1_arsv <- (
inc_data %.>%
make_data_pomp_ready(., virus_combo = c("fluA", "RSV"), HHS_region = 1)
)
pseudo_data <- tibble(time = seq(0, 10, by = 1/52),
total1 = NA,
total2 = NA, N = pomp_data_hhs1_arsv$N[1])
# make a pomp object
hhs1_a_rsv_po <- make_pomp_model(df = pseudo_data, time_start_sim = -100)
# inspect the compiled pomp object
# spy(hhs1_a_rsv_po)
if(FALSE) {
# test if the integratro works as default
test_traj <- trajectory(object = hhs1_a_rsv_po, format = "d", method = "ode23")
plot_comp <- (
test_traj %.>%
slice(., 2:n()) %.>%
select(., -`.id`) %.>%
gather(., "comp", "count", -time) %.>%
ggplot(., aes(x = time, y = count)) +
geom_line()+
facet_wrap(.~comp, scales = "free")
)
}
# test if the integratro works as default
test_traj <- trajectory(object = hhs1_a_rsv_po, format = "d", method = "ode23")
plot_comp <- (
test_traj %.>%
slice(., 2:n()) %.>%
select(., -`.id`) %.>%
gather(., "comp", "count", -time) %.>%
ggplot(., aes(x = time, y = count)) +
geom_line()+
facet_wrap(.~comp, scales = "free")
)
plot_comp
list(
lower = c(psi = 0, R01 = 1, R02 = 1, rho1 = 0, rho2 = 0,
amplitude1 = 0, amplitude2 = 0,
tpeak1 = 1, tpeak2 = 1),
upper = c(psi = 0, R01 = 10, R02 = 10, rho1 = 0, rho2 = 0,
amplitude1 = 0, amplitude2 = 0,
tpeak1 = 1, tpeak2 = 1),
)
source("./param_constraints.R", chdir = TRUE)
rp_vals_def <- c(R01 = 1, gamma1=365./9, w1=1,
R02 = 1, gamma2=365./3, w2=1,
phi1=365/30, phi2=365/30, psi =0.0, chi=0.0,
eta1=365., eta2=365.,rho1 = 0, rho2 = 0,
amplitude1=0.0, tpeak1=0.0, amplitude2=0.0, tpeak2=0.0,
pop=Npop,
mu=1/80)
rp_vals_def <- c(R01 = 1, gamma1=365./9, w1=1,
R02 = 1, gamma2=365./3, w2=1,
phi1=365/30, phi2=365/30, psi =0.0, chi=0.0,
eta1=365., eta2=365.,rho1 = 0, rho2 = 0,
amplitude1=0.0, tpeak1=0.0, amplitude2=0.0, tpeak2=0.0,
pop=1e6,
mu=1/80)
rp_vals_def
?traj_objfun()
# first load prerequisites
source("./src.R", chdir = TRUE)
# loading parameter constraints
DE_traj_match(df = pomp_data_hhs1_arsv,
param_constraints = coinf_param_constraints,
params = rp_vals_def,
ode_control = list(method = "ode23"))
#  this is a wrapper function that carries out parameter estimation using DEoptim()
DE_traj_match <- function(param_constraints,
params = p_vals,
ninit = np_val, ode_control = NULL,
hypo_name, best_past_est = NULL,
seed = 986747881L,
other_DE_controls = my_controls,
...) {
message(cat(c("Est: ", names(param_constraints$lower))))
browser()
# generate a pomp objective function - this step also includes defining the pomp object
# NOTE: names of the parameters estimated are taken from the lower constraint vector
pomp_objfun <- (
make_pomp(...) %.>%
# define the objective function
traj_objfun(.,
est = names(param_constraints$lower),
params = params, fail.value = 1e20,
ode_control = ode_control)
)
# browser()
# generate a grid of initial guesses
if(is.null(best_past_est)) {
init_guess_grid <- sobol_design(lower = param_constraints$lower,
upper = param_constraints$upper,
nseq = ninit)
} else {
init_guess_grid <- sobol_design(lower = param_constraints$lower,
upper = param_constraints$upper,
nseq = ninit)
bind_rows(., best_past_est) %.>%
replace(., is.na(.), 0)
}
# browser()
# set seed for reproducible parallel computation
set.seed(986474881L)
RNGkind("L'Ecuyer-CMRG")
# set multi-core cluster for parallel computation optimal solution
no_cores <- detectCores()
registerDoParallel(cores = no_cores)
cl <- makeCluster(no_cores, type="FORK")
# feed all this info to the evolutionary optimizer
DEobj <- DEoptim(fn = DE_traj_objfun,
est = names(param_constraints$lower),
objfun = pomp_objfun,
seed = seed,
lower = param_constraints$lower,
upper = param_constraints$upper,
control = c(other_DE_controls,
list(cluster = cl,
NP = nrow(init_guess_grid),
initialpop = init_guess_grid %.>%
as.matrix(.))
)
)
stopCluster(cl)
# collect results here
result <- list(initial_pop = init_guess_grid,
DEobj = DEobj,
Hypothesis = hypo_name)
# written the result
result
}
# first load prerequisites
source("./src.R", chdir = TRUE)
# make data ready for pomp
pomp_data_hhs1_arsv <- (
inc_data %.>%
make_data_pomp_ready(., virus_combo = c("fluA", "RSV"), HHS_region = 1)
)
pseudo_data <- tibble(time = seq(0, 10, by = 1/52),
total1 = NA,
total2 = NA, N = pomp_data_hhs1_arsv$N[1])
# make a pomp object
hhs1_a_rsv_po <- make_pomp_model(df = pseudo_data, time_start_sim = -100)
# make a pomp object
hhs1_a_rsv_po <- make_pomp(df = pseudo_data, time_start_sim = -100)
rm(list = ls())
# first load prerequisites
source("./src.R", chdir = TRUE)
# make data ready for pomp
pomp_data_hhs1_arsv <- (
inc_data %.>%
make_data_pomp_ready(., virus_combo = c("fluA", "RSV"), HHS_region = 1)
)
pseudo_data <- tibble(time = seq(0, 10, by = 1/52),
total1 = NA,
total2 = NA, N = pomp_data_hhs1_arsv$N[1])
# make a pomp object
hhs1_a_rsv_po <- make_pomp(df = pseudo_data, time_start_sim = -100)
hhs1_a_rsv_po
# loading parameter constraints
DE_traj_match(df = pomp_data_hhs1_arsv,
param_constraints = coinf_param_constraints,
params = rp_vals_def,
ode_control = list(method = "ode23"))
# generate a pomp objective function - this step also includes defining the pomp object
# NOTE: names of the parameters estimated are taken from the lower constraint vector
pomp_objfun <- (
make_pomp(...) %.>%
# define the objective function
traj_objfun(.,
est = names(param_constraints$lower),
params = params, fail.value = 1e20,
ode_control = ode_control)
)
#  this is a wrapper function that carries out parameter estimation using DEoptim()
DE_traj_match <- function(param_constraints,
params = p_vals,
ninit = np_val, ode_control = NULL,
hypo_name, best_past_est = NULL,
seed = 986747881L,
other_DE_controls = my_controls,
...) {
message(cat(c("Est: ", names(param_constraints$lower))))
# browser()
# generate a pomp objective function - this step also includes defining the pomp object
# NOTE: names of the parameters estimated are taken from the lower constraint vector
pomp_objfun <- (
make_pomp(...) %.>%
# define the objective function
traj_objfun(.,
est = names(param_constraints$lower),
params = params, fail.value = 1e20,
ode_control = ode_control)
)
# browser()
# generate a grid of initial guesses
if(is.null(best_past_est)) {
init_guess_grid <- sobol_design(lower = param_constraints$lower,
upper = param_constraints$upper,
nseq = ninit)
} else {
init_guess_grid <- sobol_design(lower = param_constraints$lower,
upper = param_constraints$upper,
nseq = ninit)
bind_rows(., best_past_est) %.>%
replace(., is.na(.), 0)
}
# browser()
# set seed for reproducible parallel computation
set.seed(986474881L)
RNGkind("L'Ecuyer-CMRG")
# set multi-core cluster for parallel computation optimal solution
no_cores <- detectCores()
registerDoParallel(cores = no_cores)
cl <- makeCluster(no_cores, type="FORK")
# feed all this info to the evolutionary optimizer
DEobj <- DEoptim(fn = DE_traj_objfun,
est = names(param_constraints$lower),
objfun = pomp_objfun,
seed = seed,
lower = param_constraints$lower,
upper = param_constraints$upper,
control = c(other_DE_controls,
list(cluster = cl,
NP = nrow(init_guess_grid),
initialpop = init_guess_grid %.>%
as.matrix(.))
)
)
stopCluster(cl)
# collect results here
result <- list(initial_pop = init_guess_grid,
DEobj = DEobj,
Hypothesis = hypo_name)
# written the result
result
}
# loading parameter constraints
DE_traj_match(df = pomp_data_hhs1_arsv,
param_constraints = coinf_param_constraints,
params = rp_vals_def,
ode_control = list(method = "ode23"))
# loading parameter constraints
DE_traj_match(df = pomp_data_hhs1_arsv,
param_constraints = coinf_param_constraints,
params = rp_vals_def,
ode_control = list(method = "ode23"),
hypo_name = "co-infection",
hhs_reg = 1,
tot1_name = "fluA",
tot2_name = "RSV")
source('~/Documents/GitHub/RSV_flu/pomp_1201/test_script.R', echo=TRUE)
source('~/Documents/GitHub/RSV_flu/pomp_1201/test_script.R', echo=TRUE)
