control = c(other_DE_controls,
list(cluster = cl,
NP = nrow(init_guess_grid),
initialpop = init_guess_grid %.>%
as.matrix(.))
)
)
stopCluster(cl)
# collect results here
result <- list(initial_pop = init_guess_grid,
DEobj = DEobj,
Hypothesis = hypo_name)
# written the result
result
}
# loading parameter constraints
DE_traj_match(df = pomp_data_hhs1_arsv,
param_constraints = coinf_param_constraints,
params = rp_vals_def,
ode_control = list(method = "ode23"))
# loading parameter constraints
DE_traj_match(df = pomp_data_hhs1_arsv,
param_constraints = coinf_param_constraints,
params = rp_vals_def,
ode_control = list(method = "ode23"),
hypo_name = "co-infection",
hhs_reg = 1,
tot1_name = "fluA",
tot2_name = "RSV")
source('~/Documents/GitHub/RSV_flu/pomp_1201/test_script.R', echo=TRUE)
source('~/Documents/GitHub/RSV_flu/pomp_1201/test_script.R', echo=TRUE)
source("./src.R", chdir = TRUE)
packages <- c("tidyverse", "stringr",
"pomp", "magrittr", "wrapr",
"tictoc", "parallel",
"LaplacesDemon",
"rootSolve",
"DEoptim", "doParallel", "doRNG",
"parallel")
using<-function(...) {
libs<-unlist(...)
req<-unlist(lapply(libs,require,character.only=TRUE))
need<-libs[req==FALSE]
if(length(need)>0){
install.packages(need)
lapply(need,require,character.only=TRUE)
}
}
using(packages)
source("./src.R", chdir = TRUE)
source("./src.R", chdir = TRUE)
## specify the virus and HHS region
# make data ready for pomp
pomp_data_hhs1_rsva <- (
inc_data %.>%
make_data_pomp_ready(., virus_combo = c("RSV", "fluA"), HHS_region = 1)
)
pseudo_data <- tibble(time = seq(0, 10, by = 1/52),
total1 = NA,
total2 = NA, N = pomp_data_hhs1_arsv$N[1])
# make a pomp object
hhs1_a_rsv_po <- make_pomp(df = pseudo_data, time_start_sim = -100)
# inspect the compiled pomp object
# spy(hhs1_a_rsv_po)
if(FALSE) {
# test if the integratro works as default
test_traj <- trajectory(object = hhs1_a_rsv_po, format = "d", method = "ode23")
plot_comp <- (
test_traj %.>%
slice(., 2:n()) %.>%
select(., -`.id`) %.>%
gather(., "comp", "count", -time) %.>%
ggplot(., aes(x = time, y = count)) +
geom_line()+
facet_wrap(.~comp, scales = "free")
)
}
# loading parameter constraints
res <- (
DE_traj_match(df = pomp_data_hhs1_arsv,
param_constraints = neutral_param_constraints,
params = rp_vals_def,
ode_control = list(method = "ode23"),
hypo_name = "neutral",
hhs_reg = 1,
tot1_name = "RSV",
tot2_name = "fluA")
)
if(res$total2 == "RSV") message("Code itegration complete!")
save(res,file="pomp_data_hhs1_rsva.Rdata")
source("./src.R", chdir = TRUE)
pomp_data_hhs1_rsva <- (
inc_data %.>%
make_data_pomp_ready(., virus_combo = c("RSV", "fluA"), HHS_region = 1)
)
pseudo_data <- tibble(time = seq(0, 10, by = 1/52),
total1 = NA,
total2 = NA, N = pomp_data_hhs1_arsv$N[1])
# make a pomp object
hhs1_a_rsv_po <- make_pomp(df = pseudo_data, time_start_sim = -100)
# inspect the compiled pomp object
# spy(hhs1_a_rsv_po)
if(FALSE) {
# test if the integratro works as default
test_traj <- trajectory(object = hhs1_a_rsv_po, format = "d", method = "ode23")
plot_comp <- (
test_traj %.>%
slice(., 2:n()) %.>%
select(., -`.id`) %.>%
gather(., "comp", "count", -time) %.>%
ggplot(., aes(x = time, y = count)) +
geom_line()+
facet_wrap(.~comp, scales = "free")
)
}
# loading parameter constraints
res <- (
DE_traj_match(df = pomp_data_hhs1_arsv,
param_constraints = neutral_param_constraints,
params = rp_vals_def,
ode_control = list(method = "ode23"),
hypo_name = "neutral",
hhs_reg = 1,
tot1_name = "RSV",
tot2_name = "fluA")
)
if(res$total2 == "RSV") message("Code itegration complete!")
save(res,file="pomp_data_hhs1_rsva.Rdata")
source("./src.R", chdir = TRUE)
# make data ready for pomp
pomp_data_hhs1_rsva <- (
inc_data %.>%
make_data_pomp_ready(., virus_combo = c("RSV", "fluA"), HHS_region = 1)
)
pseudo_data <- tibble(time = seq(0, 10, by = 1/52),
total1 = NA,
total2 = NA, N = pomp_data_hhs1_arsv$N[1])
# make a pomp object
hhs1_a_rsv_po <- make_pomp(df = pseudo_data, time_start_sim = -100)
# inspect the compiled pomp object
# spy(hhs1_a_rsv_po)
if(FALSE) {
# test if the integratro works as default
test_traj <- trajectory(object = hhs1_a_rsv_po, format = "d", method = "ode23")
plot_comp <- (
test_traj %.>%
slice(., 2:n()) %.>%
select(., -`.id`) %.>%
gather(., "comp", "count", -time) %.>%
ggplot(., aes(x = time, y = count)) +
geom_line()+
facet_wrap(.~comp, scales = "free")
)
}
# loading parameter constraints
res <- (
DE_traj_match(df = pomp_data_hhs1_arsv,
param_constraints = neutral_param_constraints,
params = rp_vals_def,
ode_control = list(method = "ode23"),
hypo_name = "neutral",
hhs_reg = 1,
tot1_name = "RSV",
tot2_name = "fluA")
)
if(res$total2 == "RSV") message("Code itegration complete!")
save(res,file="pomp_data_hhs1_rsva.Rdata")
source("./src.R", chdir = TRUE)
source("./src.R", chdir = TRUE)
source("./src.R", chdir = TRUE)
pomp_data_hhs1_rsva <- (
inc_data %.>%
make_data_pomp_ready(., virus_combo = c("RSV", "fluA"), HHS_region = 1)
)
pseudo_data <- tibble(time = seq(0, 10, by = 1/52),
total1 = NA,
total2 = NA, N = pomp_data_hhs1_arsv$N[1])
# make a pomp object
hhs1_a_rsv_po <- make_pomp(df = pseudo_data, time_start_sim = -100)
# inspect the compiled pomp object
# spy(hhs1_a_rsv_po)
if(FALSE) {
# test if the integratro works as default
test_traj <- trajectory(object = hhs1_a_rsv_po, format = "d", method = "ode23")
plot_comp <- (
test_traj %.>%
slice(., 2:n()) %.>%
select(., -`.id`) %.>%
gather(., "comp", "count", -time) %.>%
ggplot(., aes(x = time, y = count)) +
geom_line()+
facet_wrap(.~comp, scales = "free")
)
}
# loading parameter constraints
res <- (
DE_traj_match(df = pomp_data_hhs1_arsv,
param_constraints = neutral_param_constraints,
params = rp_vals_def,
ode_control = list(method = "ode23"),
hypo_name = "neutral",
hhs_reg = 1,
tot1_name = "RSV",
tot2_name = "fluA")
)
pomp_data_hhs1_rsva <- (
inc_data %.>%
make_data_pomp_ready(., virus_combo = c("RSV", "fluA"), HHS_region = 1)
)
source("./src.R", chdir = TRUE)
pomp_data_hhs1_rsva <- (
inc_data %.>%
make_data_pomp_ready(., virus_combo = c("RSV", "fluA"), HHS_region = 1)
)
hhs1_a_rsv_po <- make_pomp(df = pseudo_data, time_start_sim = -100)
res <- (
DE_traj_match(df = pomp_data_hhs1_arsv,
param_constraints = neutral_param_constraints,
params = rp_vals_def,
ode_control = list(method = "ode23"),
hypo_name = "neutral",
hhs_reg = 1,
tot1_name = "RSV",
tot2_name = "fluA")
)
if(res$total2 == "RSV") message("Code itegration complete!")
save(res,file="pomp_data_hhs1_rsva.Rdata")
pomp_data_hhs1_rsva <- (
inc_data %.>%
make_data_pomp_ready(., virus_combo = c("RSV", "fluA"), HHS_region = 1)
)
res <- (
DE_traj_match(df = pomp_data_hhs1_rsva,
param_constraints = neutral_param_constraints,
params = rp_vals_def,
ode_control = list(method = "ode23"),
hypo_name = "neutral",
hhs_reg = 1,
tot1_name = "RSV",
tot2_name = "fluA")
)
if(res$total2 == "RSV") message("Code itegration complete!")
save(res,file="pomp_data_hhs1_rsva.Rdata")
source("./src.R", chdir = TRUE)
res <- (
DE_traj_match(df = pomp_data_hhs1_rsva,
param_constraints = neutral_param_constraints,
params = rp_vals_def,
ode_control = list(method = "ode23"),
hypo_name = "neutral",
hhs_reg = 1,
tot1_name = "RSV",
tot2_name = "fluA")
)
if(res$total2 == "RSV") message("Code itegration complete!")
save(res,file="pomp_data_hhs1_rsva.Rdata")
source("./src.R", chdir = TRUE)
# make data ready for pomp
pomp_data_hhs1_arsv <- (
inc_data %.>%
make_data_pomp_ready(., virus_combo = c("RSV", "fluA"), HHS_region = 1)
)
res <- (
DE_traj_match(df = pomp_data_hhs1_arsv,
param_constraints = neutral_param_constraints,
params = rp_vals_def,
ode_control = list(method = "ode23"),
hypo_name = "neutral",
hhs_reg = 1,
tot1_name = "RSV",
tot2_name = "fluA")
)
if(res$total2 == "RSV") message("Code itegration complete!")
# this 'convenience' function modifies vector of default params to set hypothesis specific param estimates
sim_p_vals <- function(estm_vect, default_p_vals = param_vals_est) {
replace_these <- names(default_p_vals)[names(default_p_vals) %in% names(estm_vect)]
tmp_p_vals <- default_p_vals
tmp_p_vals[replace_these] <- estm_vect[replace_these]
tmp_p_vals
}
# a wrapper to unlist and unname a list object.
un_list_name <- function(x) {
x %.>%
unlist(.) %.>%
unname(.)
}
# operator for easy analysis
`%nin%` <- Negate(`%in%`)
# wrapper - this function produces pomp style objective function for DEoptim()
DE_traj_objfun <- function(x, objfun, est,
seed = 986747881L) {
# produce an empty vector
par_v <- rep(NA, times = length(est))
# name the vector
names(par_v) <- est
# assign the guess to a new internal vector
par_v[est] <- un_list_name(x)
# supply to the pomp objective function
objfun(par = par_v)
}
#  this is a wrapper function that carries out parameter estimation using DEoptim()
DE_traj_match <- function(param_constraints,
params = p_vals,
ninit = np_val, ode_control = NULL,
hypo_name, hhs_reg, tot1_name, tot2_name,
best_past_est = NULL,
seed = 986747881L,
other_DE_controls = my_controls,
...) {
message(cat(c("Est: ", names(param_constraints$lower))))
# browser()
# generate a pomp objective function - this step also includes defining the pomp object
# NOTE: names of the parameters estimated are taken from the lower constraint vector
pomp_objfun <- (
make_pomp(...) %.>%
# define the objective function
traj_objfun(.,
est = names(param_constraints$lower),
params = params, fail.value = 1e20,
ode_control = ode_control)
)
# browser()
# generate a grid of initial guesses
if(is.null(best_past_est)) {
init_guess_grid <- sobolDesign(lower = param_constraints$lower,
upper = param_constraints$upper,
nseq = ninit)
} else {
init_guess_grid <- sobolDesign(lower = param_constraints$lower,
upper = param_constraints$upper,
nseq = ninit)
bind_rows(., best_past_est) %.>%
replace(., is.na(.), 0)
}
# browser()
# set seed for reproducible parallel computation
set.seed(986474881L)
RNGkind("L'Ecuyer-CMRG")
# set multi-core cluster for parallel computation optimal solution
no_cores <- detectCores()
registerDoParallel(cores = no_cores)
cl <- makeCluster(no_cores, type="FORK")
# feed all this info to the evolutionary optimizer
DEobj <- DEoptim(fn = DE_traj_objfun,
est = names(param_constraints$lower),
objfun = pomp_objfun,
seed = seed,
lower = param_constraints$lower,
upper = param_constraints$upper,
control = c(other_DE_controls,
list(cluster = cl,
NP = nrow(init_guess_grid),
initialpop = init_guess_grid %.>%
as.matrix(.))
)
)
stopCluster(cl)
# collect results here
result <- list(initial_pop = init_guess_grid,
DEobj = DEobj,
Hypothesis = hypo_name,
HHS = hhs_reg,
total1 = tot1_name,
total2 = tot2_name)
# written the result
result
}
# this function prepares incidence data for pomp
make_data_pomp_ready <- function(data = inc_data, virus_combo = c("RSV", "fluA"), HHS_region = 1) {
#browser()
data %.>%
filter(., HHS_REGION == HHS_region & virus %in% virus_combo) %.>%
mutate(.,
virus = ifelse(virus == virus_combo[1], "total1", "total2")) %.>%
select(., -c(HHS_REGION)) %.>%
spread(., key = virus, value = cases)
}
# make_data_pomp_ready()
res <- (
DE_traj_match(df = pomp_data_hhs1_arsv,
param_constraints = neutral_param_constraints,
params = rp_vals_def,
ode_control = list(method = "ode23"),
hypo_name = "neutral",
hhs_reg = 1,
tot1_name = "RSV",
tot2_name = "fluA")
)
source("./src.R", chdir = TRUE)
pomp_data_hhs1_arsv <- (
inc_data %.>%
make_data_pomp_ready(., virus_combo = c("RSV", "fluA"), HHS_region = 1)
)
res <- (
DE_traj_match(df = pomp_data_hhs1_arsv,
param_constraints = neutral_param_constraints,
params = rp_vals_def,
ode_control = list(method = "ode23"),
hypo_name = "neutral",
hhs_reg = 1,
tot1_name = "RSV",
tot2_name = "fluA")
)
if(res$total2 == "RSV") message("Code itegration complete!")
source("./src.R", chdir = TRUE)
res <- (
DE_traj_match(df = pomp_data_hhs1_arsv,
param_constraints = neutral_param_constraints,
params = rp_vals_def,
ode_control = list(method = "ode23"),
hypo_name = "neutral",
hhs_reg = 1,
tot1_name = "RSV",
tot2_name = "fluA")
)
source("./src.R", chdir = TRUE)
res <- (
DE_traj_match(df = pomp_data_hhs1_arsv,
param_constraints = neutral_param_constraints,
params = rp_vals_def,
ode_control = list(method = "ode23"),
hypo_name = "neutral",
hhs_reg = 1,
tot1_name = "RSV",
tot2_name = "fluA")
)
if(res$total2 == "RSV") message("Code itegration complete!")
res <- (
DE_traj_match(df = pomp_data_hhs1_rsva,
param_constraints = neutral_param_constraints,
params = rp_vals_def,
ode_control = list(method = "ode23"),
hypo_name = "neutral",
hhs_reg = 1,
tot1_name = "RSV",
tot2_name = "fluA")
)
if(res$total2 == "RSV") message("Code itegration complete!")
save(res, file = "res_hhs1_rsva.Rdata")
## specify the virus and HHS region
# make data ready for pomp
pomp_data_hhs1_rsva <- (
inc_data %.>%
make_data_pomp_ready(., virus_combo = c("RSV", "fluA"), HHS_region = 1)
)
res <- (
DE_traj_match(df = pomp_data_hhs1_rsva,
param_constraints = neutral_param_constraints,
params = rp_vals_def,
ode_control = list(method = "ode23"),
hypo_name = "neutral",
hhs_reg = 1,
tot1_name = "RSV",
tot2_name = "fluA")
)
if(res$total2 == "RSV") message("Code itegration complete!")
save(res, file = "res_hhs1_rsva.Rdata")
load("/Users/jianichen1/Dropbox/RSV_flu/RSV_flu_git/pomp_1201/res_hhs1_rsva.Rdata")
res$DEobj$optim
source("./src.R", chdir = TRUE)
pomp_data_hhs1_rsva <- (
inc_data %.>%
make_data_pomp_ready(., virus_combo = c("RSV", "fluA"), HHS_region = 1)
)
res <- (
DE_traj_match(df = pomp_data_hhs1_rsva,
param_constraints = neutral_param_constraints,
params = rp_vals_def,
ode_control = list(method = "ode23"),
hypo_name = "neutral",
hhs_reg = 1,
tot1_name = "RSV",
tot2_name = "fluA")
)
if(res$total2 == "RSV") message("Code itegration complete!")
res$DEobj$optim$bestval
res$DEobj$optim
source("./src.R", chdir = TRUE)
source("./src.R", chdir = TRUE)
pomp_data_hhs1_rsva <- (
inc_data %.>%
make_data_pomp_ready(., virus_combo = c("RSV", "fluA"), HHS_region = 1)
)
res <- (
DE_traj_match(df = pomp_data_hhs1_rsva,
param_constraints = neutral_param_constraints,
params = rp_vals_def,
ode_control = list(method = "ode23"),
hypo_name = "neutral",
hhs_reg = 1,
tot1_name = "RSV",
tot2_name = "fluA")
)
if(res$total2 == "RSV") message("Code itegration complete!")
save(res, file = "res_hhs1_rsva.Rdata")
best_past_est<-as_tibble(R01=2,R02=1)
best_past_est<-as_tibble(R01=2,R02=1)
best_past_est<-data.frame(R01=1,
R02=1.2,
amplititud1=0.2)
best_past_est<-data.frame(R01=1,
R02=1.2,
amplititud1=0.2)
best_past_est
best_past_est<-data.frame(R01=2.012,
R02=1.243,
amplitude1=0.116,
amplitude2=0.126,
tpeak1=0.938,
tpeak2=0.022,
rho1=0.000253,
rho2=0.000585)
